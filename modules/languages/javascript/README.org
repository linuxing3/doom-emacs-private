#+TITLE: :private javascript

* Using javascript IDE mode
This module adds Javascript support.

+ Code completion (tide)
+ REPL support (nodejs-repl)
+ Refactoring commands (js2-refactor)
+ Syntax checking (flycheck)
+ Browser code injection with skewer-mode
+ Coffeescript & JSX support
+ Jump-to-definitions and references support (xref)

* Tide
TypeScript Interactive Development Environment for Emacs

#+BEGIN_SRC markdown
|M-.|	Jump to the definition of the symbol at point. With a prefix arg, Jump to the type definition.
|M-,|	Return to your pre-jump position.
|M-x| tide-restart-server | Restart tsserver. This would come in handy after you edit tsconfig.json or checkout a different branch.
|M-x| tide-documentation-at-point | Show documentation for the symbol at point.
|M-x| tide-references | List all references to the symbol at point in a buffer. References can be navigated using n and p. Press enter to open the file.
|M-x| tide-project-errors | List all errors in the project. Errors can be navigated using n and p. Press enter to open the file.
|M-x| tide-rename-symbol | Rename all occurrences of the symbol at point.
|M-x| tide-rename-file | Rename current file and all it's references in other files.
|M-x| tide-format | Format the current region or buffer.
|M-x| tide-fix | Apply code fix for the error at point. When invoked with a prefix arg, apply code fix for all the errors in the file that are similar to the error at point.
|M-x| tide-add-tslint-disable-next-line | If the point is on one or more tslint errors, add a tslint:disable-next-line flag on the previous line to silence the errors. Or, if a flag already exists on the previous line, modify the flag to silence the errors.
|M-x| tide-refactor | Refactor code at point or current region.
|M-x| tide-jsdoc-template | Insert JSDoc comment template at point.
|M-x| tide-verify-setup | Show the version of tsserver.
|M-x| tide-organize-imports | Organize imports in the file.
#+END_SRC

* web-mode

http://web-mode.org/

** Shortcuts

#+BEGIN_SRC markdown
### General
M-; comment / uncomment line(s)
C-c C-f toggle folding on a tag/block
C-c C-i indent entire buffer
C-c C-m mark and expand
C-c C-s insert snippet
C-c C-w toggle display of invalid whitespaces
### DOM
C-c C-d a replace apostrophes
C-c C-d d show tag mismatch
C-c C-d e replace HTML entities
C-c C-d n normalize
C-c C-d q replace dumb quotes
C-c C-d t traverse dom tree
C-c C-d x xpath
### Block
C-c C-b b block beginning
C-c C-b c block close
C-c C-b e block end
C-c C-b k block kill
C-c C-b n next block
C-c C-b p previous block
C-c C-b s block select
### HTML element
C-c C-e / element close
C-c C-e a select element content
C-c C-e b element beginning
C-c C-e c element clone
C-c C-e d child element (down)
C-c C-e e element end
C-c C-e f toggle folding on children
C-c C-e i element insert
C-c C-e k element kill
C-c C-e m mute blanks between children
C-c C-e n next element
C-c C-e p previous element
C-c C-e r rename element
C-c C-e s select element
C-c C-e t transpose element
C-c C-e u parent element (up)
C-c C-e v element vanish
C-c C-e w wrap element
#+END_SRC

* Appendix
** Commands
| command                          | key / ex command | description                                                |
|----------------------------------+------------------+------------------------------------------------------------|
| ~+javascript/repl~               | =:repl=          | Open the NodeJS REPL (or send the current selection to it) |
| ~+javascript/skewer-this-buffer~ | =SPC m S=        | Attaches a browser to the current buffer                   |


* Indium

** Starting Indium
Indium can be started in two modes:

*** Connect: M-x indium-connect 
Connect indium to a running runtime from one of the configurations in the .indium.json project file.

*** Launch: M-x indium-launch 
Start a JavaScript process (Chrome or NodeJS) as specified from the configurations in the .indium.json project file.

** Setup indium

#+BEGIN_SRC javascript
{
  "configurations": [
    {
	     "name": "Chrome Browser",
	     "type": "chrome",
      "host": "localhost",
      "port": "9222",
	     "url": "http://localhost:3000"
    },
    {
      "name": "Node play",
      "type": "node",
      "command": "node ./lib/play/bin/ft.js",
      "inspect-brk": true
    }
  ]
}
#+END_SRC

** Firing up Indium

To start Indium, you can either do M-x indium-connect to connect 
to a running JavaScript process (Chrome tab the example above), 

or do M-x indium-launch to start a new process and automatically connect to it.
